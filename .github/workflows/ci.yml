name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE-*'
      - '**.md'
      - '**.txt'
  pull_request:
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE-*'
      - '**.md'
      - '**.txt'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1
  nightly: nightly
  stable: stable

jobs:
  # sanitizer:
  #   name: sanitizer
  #   strategy:
  #     matrix:
  #       os:
  #         - ubuntu-latest
  #         - macos-latest
  #         - windows-latest
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Cache cargo build and registry
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           target
  #         key: ${{ runner.os }}-sanitizer-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-sanitizer-
  #     - name: Install Rust
  #       run: rustup update $nightly && rustup default $nightly
  #     - name: Install rust-src
  #       run: rustup component add rust-src
  #     - name: Install cargo-hack
  #       run: cargo install cargo-hack
  #     - name: ASAN / LSAN / TSAN
  #       run: ci/sanitizer.sh

  # miri:
  #   name: miri
  #   strategy:
  #     matrix:
  #       os:
  #         - ubuntu-latest
  #         - macos-latest
  #         - windows-latest
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Cache cargo build and registry
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           target
  #         key: ${{ runner.os }}-miri-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-miri-
  #     - name: Install cargo-hack
  #       run: cargo install cargo-hack
  #     - name: Miri
  #       run: ci/miri.sh

  # loom:
  #   name: loom
  #   strategy:
  #     matrix:
  #       os:
  #         - ubuntu-latest
  #         - macos-latest
  #         - windows-latest
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Cache cargo build and registry
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           target
  #         key: ${{ runner.os }}-loom-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-loom-
  #     - name: Install Rust
  #       run: rustup update $nightly && rustup default $nightly
  #     - name: Install cargo-hack
  #       run: cargo install cargo-hack
  #     - name: Loom tests
  #       run: RUSTFLAGS="--cfg loom -Dwarnings" cargo hack test --test loom

  # valgrind:
  #   name: valgrind
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Cache cargo build and registry
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           target
  #         key: ubuntu-latest-valgrind-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ubuntu-latest-valgrind-

  #     - name: Install Rust ${{ env.stable }}
  #       uses: actions-rs/toolchain@v1
  #       with:
  #           toolchain: ${{ env.stable }}
  #           override: true
  #     - name: Install Valgrind
  #       run: |
  #         sudo apt-get update -y
  #         sudo apt-get install -y valgrind
      # Compile tests
      # - name: cargo build foo
      #   run: cargo build --bin foo
      #   working-directory: integration

      # Run with valgrind
      # - name: Run valgrind foo
      #   run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all ./target/debug/foo
      #   working-directory: integration

  docs:
    name: docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo build and registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-latest-docs-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-latest-docs-
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          override: true
      - name: "doc --lib --all-features"
        run: cargo doc --lib --no-deps --all-features
        env:
          RUSTFLAGS: --cfg docsrs
          RUSTDOCFLAGS: --cfg docsrs -Dwarnings

  coverage:
    name: coverage
    runs-on: ubuntu-latest
    needs:
      # - loom
      - docs
    steps:
      - uses: actions/checkout@v4
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
          version: latest
      - name: Cache ~/.cargo
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-coverage-dotcargo
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-coverage-cargo-build-target
      - name: Run tarpaulin
        uses: actions-rs/cargo@v1
        with:
          command: tarpaulin
          args: --all-features --run-types tests --run-types doctests --workspace --out xml
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          slug: ${{ github.repository }}
